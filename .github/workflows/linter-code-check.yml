name: Linter code check

on:
  push:
    branches:
      - main
      - stage
      - develop
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - stage
      - develop
      - testing-linter

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Install mypy globally
        run: |
          pip install mypy

      - name: Analysing templates with mypy
        run: |
          for dir in tasks/* ; do
            echo "Checking directory: $dir"

            # Skip the directory if no .mypy.ini file is found
            if [ ! -f "$dir/.mypy.ini" ]; then
              echo "No .mypy.ini file found in $dir, skipping..."
              continue
            fi

            # Determine the type of environment and generate a unique cache key
            if [ -f "$dir/environment.yml" ]; then
              env_type="conda"
              environment_cache_key="${{ runner.os }}-conda-${dir}-${{ hashFiles('${dir}/environment.yml') }}"
            elif [ -f "$dir/requirements.txt" ]; then
              env_type="venv"
              environment_cache_key="${{ runner.os }}-venv-${dir}-${{ hashFiles('${dir}/requirements.txt') }}"
            else
              echo "No environment file found in $dir, skipping directory"
              continue
            fi

            # Restore the cache if available
            echo "Restoring environment cache for $dir"
            cache_restore_result=$(gh api -X GET \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/actions/caches \
              --field "key=${environment_cache_key}")

            if echo "$cache_restore_result" | grep -q '"total_count": 1'; then
              echo "Cache found for $dir"
              cache_id=$(echo "$cache_restore_result" | jq -r '.actions_caches[0].id')
              gh api -X GET -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/actions/caches/${cache_id}/download | tar -xzf - -C /
            else
              echo "No cache found for $dir, setting up environment"
              if [ "$env_type" = "conda" ]; then
                echo "Setting up conda environment for $dir"
                conda env create -n $(basename "$dir") -f "$dir/environment.yml"
                echo "Created conda environment"
                conda activate $(basename "$dir")
                pip install mypy
              elif [ "$env_type" = "venv" ]; then
                echo "Setting up venv for $dir"
                python -m venv "$dir/venv"
                source "$dir/venv/bin/activate"
                pip install -r "$dir/requirements.txt"
                pip install mypy
              fi

              # Save the environment cache
              echo "Saving environment cache for $dir"
              if [ "$env_type" = "conda" ]; then
                tar -czf ${dir}-conda-env.tar.gz ~/.conda/envs/$(basename "$dir")
              elif [ "$env_type" = "venv" ]; then
                tar -czf ${dir}-venv.tar.gz "$dir/venv"
              fi
              gh api -X POST \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/actions/caches \
                --field "key=${environment_cache_key}" \
                --field "path=${dir}-conda-env.tar.gz"
            fi

            echo "Running mypy in $dir"
            set +e  # Disable exit on error
            mypy_output=$(mypy --config-file "$dir/.mypy.ini" "$dir" 2>&1)
            set -e  # Re-enable exit on error
            echo "$mypy_output"

            if echo "$mypy_output" | grep -q 'error:'; then
              echo "Running install-types in $dir"
              mypy --install-types --non-interactive --config-file "$dir/.mypy.ini" "$dir"
            fi

            if [ "$env_type" = "conda" ]; then
              conda deactivate
            elif [ "$env_type" = "venv" ]; then
              deactivate
            fi
          done

      - name: Clean up conda
        run: conda clean --all -y

      - name: Clean up pip cache
        run: pip cache purge
